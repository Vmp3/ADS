SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBCONTACORRENTE;
CREATE DATABASE DBCONTACORRENTE;
USE DBCONTACORRENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, NOME VARCHAR(100)
	, CPF CHAR(11)
);

CREATE TABLE CONTA (
	IDCONTA INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, IDCLIENTE INT NOT NULL
	, DT_ABERTURA DATE
	, LIMITE_CREDITO NUMERIC(8,2)
	, TIPO ENUM('CONTA-CORRENTE', 'POUPANÇA')
	, FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE (IDCLIENTE)
);

CREATE TABLE MOVIMENTACAO(
	IDMOVIMENTACAO INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, IDCONTA INT NOT NULL
	, DT_MOVIMENTACAO DATE
	, VALOR NUMERIC(8,2)
	, TIPO ENUM('DEBITO', 'CRÉDITO')
	, OBSERVACAO TEXT
	, FOREIGN KEY (IDCONTA) REFERENCES CONTA (IDCONTA)
);

CREATE VIEW VW_SALDO AS
SELECT
	CONTA.IDCONTA
    , CONTA.TIPO
    , IFNULL(CONTA.LIMITE_CREDITO, 0) AS LIMITE_CREDITO
    , IFNULL(SUM(MOVIMENTACAO.VALOR), 0) AS SALDO
    , CASE
		WHEN CONTA.TIPO = 'CONTA-CORRENTE' THEN IFNULL(CONTA.LIMITE_CREDITO, 0)
        ELSE 0
		END + IFNULL(SUM(MOVIMENTACAO.VALOR), 0) AS SALDO_TOTAL
FROM
	CONTA
    LEFT JOIN MOVIMENTACAO ON
	CONTA.IDCONTA = MOVIMENTACAO.IDCONTA
GROUP BY
	CONTA.IDCONTA
	, CONTA.TIPO
    , CONTA.LIMITE_CREDITO;

DELIMITER $$

CREATE PROCEDURE SP_MOVIMENTACAO(pIDCONTA INT, pOPERACAO VARCHAR(10), pOBSERVACAO TEXT, pVALOR NUMERIC(8,2), OUT pRESULTADO INT, OUT pMENSAGEM TEXT)
BEGIN

    DECLARE vSALDO NUMERIC(8,2);
    DECLARE vIDCONTA_EXISTENTE INT;
    
    SELECT IDCONTA
    INTO vIDCONTA_EXISTENTE
    FROM CONTA
    WHERE IDCONTA = pIDCONTA;

	-- VERIFICANDO SE A CONTA EXISTE
	IF(vIDCONTA_EXISTENTE IS NOT NULL) THEN
		-- VERIFICANDO SE O VALOR É POSITIVO
		IF (pVALOR > 0) AND (pVALOR IS NOT NULL)THEN
			IF (pOPERACAO = 'SAQUE') THEN
        
				-- BUSCANDO INFORMACAO DO SALDO TOTAL DA CONTA INFORMADA
				SELECT SALDO_TOTAL
				INTO vSALDO
				FROM VW_SALDO
				WHERE IDCONTA = pIDCONTA;
	
				IF (vSALDO >= pVALOR) THEN
		
					-- REGISTRANDO OPERACAO
					INSERT INTO MOVIMENTACAO (IDCONTA, DT_MOVIMENTACAO, VALOR, TIPO, OBSERVACAO)
					VALUE(pIDCONTA, NOW(), pVALOR * -1, 'DEBITO', pOBSERVACAO);

					SET pRESULTADO = 1;
					SET pMENSAGEM = 'OPERACAO DE SAQUE REALIZADA COM SUCESSO';
				ELSE
					SET pRESULTADO = 0;
					SET pMENSAGEM = 'SALDO INSUFICIENTE';
				END IF;
                
			ELSEIF (pOPERACAO = 'DEPOSITO') THEN
        
				-- REGISTRANDO OPERACAO
				INSERT INTO MOVIMENTACAO (IDCONTA, DT_MOVIMENTACAO, VALOR, TIPO, OBSERVACAO)
				VALUE(pIDCONTA, NOW(), pVALOR, 'CRÉDITO', pOBSERVACAO);
            
				SET pRESULTADO = 1;
				SET pMENSAGEM = 'OPERACAO DE DEPOSITO REALIZADA COM SUCESSO';
            
			ELSE
				SET pRESULTADO = 0;
				SET pMENSAGEM = 'OPERACAO INFORMADA É INVALIDA';
			END IF;
        
		ELSE
			SET pRESULTADO = 0;
			SET pMENSAGEM = 'VALOR DE OPERACAO INVALIDO';
		END IF;
   
    ELSE
        SET pRESULTADO = 0;
        SET pMENSAGEM = 'CONTA NÃO EXISTE NO SISTEMA';
    END IF;
  
END $$

CREATE PROCEDURE SP_TRANSFERENCIA(pIDCONTA_ORIGEM INT, pIDCONTA_DESTINO INT, pVALOR NUMERIC(8,2), OUT pRESULTADO INT, OUT pMENSAGEM TEXT)
BEGIN

	DECLARE vRESULTADO INT;
    DECLARE vMENSAGEM TEXT;
    DECLARE vIDCONTA_EXISTENTE INT;
    
    SELECT IDCONTA
    INTO vIDCONTA_EXISTENTE
    FROM CONTA
    WHERE IDCONTA = pIDCONTA_DESTINO;
    
	IF(vIDCONTA_EXISTENTE IS NOT NULL) THEN
		CALL SP_MOVIMENTACAO(pIDCONTA_ORIGEM, 'SAQUE', CONCAT('OPERACAO DE TRANSFERENCIA PARA A CONTA ', pIDCONTA_DESTINO), pVALOR, vRESULTADO, vMENSAGEM);
    
		IF(vRESULTADO = 1)THEN
			CALL SP_MOVIMENTACAO(pIDCONTA_DESTINO, 'DEPOSITO', CONCAT('OPERACAO DE TRANSFERENCIA DA CONTA ', pIDCONTA_ORIGEM), pVALOR, vRESULTADO, vMENSAGEM);

			IF(vRESULTADO = 1)THEN
				SET pRESULTADO = 1;
				SET pMENSAGEM = 'TRANSFERENCIA REALIZADA COM SUCESSO';
			ELSE
				CALL SP_MOVIMENTACAO(pIDCONTA_ORIGEM, 'DEPOSITO', pVALOR, vRESULTADO, vMENSAGEM);
				SET pRESULTADO = 0;
				SET pMENSAGEM = 'TRANSFERENCIA ESTORNADA COM ERRO NA CONTA DE DESTINO';
			END IF;
		ELSE
			SET pMENSAGEM = vMENSAGEM;
			SET pRESULTADO = 0;
		END IF;
	
	ELSE
		SET pMENSAGEM = 'CONTA DE DESTINO NÃO ENCONTRADA';
        SET pRESULTADO = 0;
	END IF;
    
END $$

DELIMITER ;

INSERT INTO CLIENTE(NOME) VALUES ('ANA');

INSERT INTO CONTA (IDCLIENTE, DT_ABERTURA, LIMITE_CREDITO, TIPO) VALUES (1, NOW(), NULL, 'POUPANÇA');
INSERT INTO CONTA (IDCLIENTE, DT_ABERTURA, LIMITE_CREDITO, TIPO) VALUES (1, NOW(), 1000, 'CONTA-CORRENTE');

CALL SP_MOVIMENTACAO(1, 'SAQUE', 'OPERACAO DE SAQUE', 100, @RESULTADO, @TEXTO);
CALL SP_MOVIMENTACAO(1, 'DEPOSITO', 'OPERACAO DE DEPOSITO', 100, @RESULTADO, @TEXTO);
-- CALL SP_MOVIMENTACAO(3, 'DEPOSITO', 'OPERACAO DE DEPOSITO', 100, @RESULTADO, @TEXTO);
CALL SP_TRANSFERENCIA(2, 1, 500, @RESULTADO, @TEXTO);

SELECT @RESULTADO, @TEXTO;

SELECT * FROM CLIENTE;
SELECT * FROM CONTA;
SELECT * FROM VW_SALDO;
SELECT * FROM MOVIMENTACAO;